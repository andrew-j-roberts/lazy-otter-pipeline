name: "Build and Deploy Service"

on:
  workflow_dispatch:
    inputs:
      service-name:
        description: "Service name"
        required: true

jobs:
  main:
    runs-on: ubuntu-latest
    name: Build and Deploy Service
    steps:
      # checkout main branch of lazy-otter-pipeline
      - name: Checkout
        uses: actions/checkout@v2

      # configure AWS credentials
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_TF_AGENT }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_TF_AGENT }}
          aws-region: us-east-1

      # login the local Docker client to the default AWS ECR registry for the provided region
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      # need to get the cluster_arn from Terraform's backend s3 state bucket so that we can update its services
      - name: Get cluster_arn from remote Terraform backend state
        id: get-cluster
        run: |
          cd terraform
          terraform init
          CLUSTER_ARN=$(terraform output cluster_arn)
          echo "::set-output name=cluster-arn::$CLUSTER_ARN"
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID_TF_AGENT }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY_TF_AGENT }}

      # build, tag, and push service images to the AWS ECR repositories that were created by the Terraform step
      - name: Run locally sourced build-and-deploy-image GitHub action
        run: |
          git clone https://${{ secrets.GITHUB_TOKEN }}@github.com/solacese/${{ github.event.inputs.service-name }}.git
          docker build -t ${{ steps.login-ecr.outputs.registry }}/${{ github.event.inputs.service-name }}:latest ${{ github.event.inputs.service-name }}/
          docker push ${{ steps.login-ecr.outputs.registry }}/${{ github.event.inputs.service-name }}:latest
          aws ecs update-service --cluster ${{ steps.get-cluster.outputs.cluster-arn }} --service ${{ github.event.inputs.service-name }} --force-new-deployment
